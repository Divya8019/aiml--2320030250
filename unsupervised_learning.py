# -*- coding: utf-8 -*-
"""unsupervised learning

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TXbvpscvfSGE8KWjB1CqgBixUUommI1s
"""

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Load the dataset from a CSV file
# Replace 'diabetes.csv' with the path to your file
data = pd.read_csv('/content/sample_data/diabetes.csv')

# Display the first few rows of the dataset
print("Dataset preview:")
print(data.head())

# Check for and drop any missing values (optional)
data = data.dropna()

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(data)

# Apply K-Means clustering
n_clusters = 3  # Set the number of clusters you want
kmeans = KMeans(n_clusters=n_clusters, random_state=0)
data['Cluster'] = kmeans.fit_predict(X_scaled)

# Dimensionality reduction for visualization
pca = PCA(n_components=2)  # Reduce to 2 dimensions for visualization
X_pca = pca.fit_transform(X_scaled)

# Plotting the clusters
plt.figure(figsize=(10, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=data['Cluster'], cmap='viridis', marker='o', edgecolor='k', s=50)
plt.title('K-Means Clustering of Diabetes Dataset')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.colorbar(label='Cluster Label')
plt.show()

# Optional: Print cluster centers
print("Cluster Centers:")
print(kmeans.cluster_centers_)

# Commented out IPython magic to ensure Python compatibility.
# Import necessary libraries
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns

# Set up for plotting in Colab
# %matplotlib inline
sns.set(style="whitegrid")

# Upload the diabetes dataset file if not already in Colab
from google.colab import files
import os

if not os.path.isfile('diabetes.csv'):
    print("Please upload the diabetes.csv file.")
    uploaded = files.upload()

# Load the dataset
try:
    df = pd.read_csv("diabetes.csv")
except FileNotFoundError:
    print("The file 'diabetes.csv' could not be found. Please ensure it's uploaded.")

# Preprocess the data
try:
    features = df.drop(columns=['Outcome'])  # Drop any label if present
except KeyError:
    print("Outcome column not found in the dataset. Please check the dataset structure.")

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Determine optimal K using the Elbow Method
inertia = []
K_range = range(1, 11)
for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)

# Plot the Elbow Curve
plt.figure(figsize=(8, 6))
plt.plot(K_range, inertia, 'bo-')
plt.xlabel("Number of Clusters (K)")
plt.ylabel("Inertia")
plt.title("Elbow Method")
plt.show()

# Fit the K-means model with the optimal K
optimal_k = 3  # Assume 3 is optimal from elbow/silhouette analysis
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
clusters = kmeans.fit_predict(scaled_features)
df['Cluster'] = clusters

# Evaluate the clustering using silhouette score
score = silhouette_score(scaled_features, clusters)
print(f'Silhouette Score: {score}')

# Analyze cluster characteristics
cluster_centers = kmeans.cluster_centers_
print(f'Cluster Centers:\n {cluster_centers}')